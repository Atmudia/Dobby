name: Build

on: push

jobs:
  win-build:
    runs-on: windows-latest
    name: Windows Build

    steps:
      - uses: actions/checkout@v3

      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1.1

      - name: Configure CMake
        shell: cmd
        run: |
          cmake -DCMAKE_SYSTEM_PROCESSOR=amd64 -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_BUILD_TYPE=Release -DDynamicBinaryInstrument=OFF -DPlugin.SymbolResolver=OFF -A x64 -B build64
          cmake -DCMAKE_SYSTEM_PROCESSOR=x86 -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_BUILD_TYPE=Release -DDynamicBinaryInstrument=OFF -DPlugin.SymbolResolver=OFF -A Win32 -B build32

      - name: Build x86
        run: |
          msbuild -m -p:Configuration=Release -t:dobby build32/Dobby.sln

      - name: Build x64
        run: |
          msbuild -m -p:Configuration=Release -t:dobby build64/Dobby.sln

      - name: Collect artifacts
        shell: cmd
        run: |
          mkdir build_result
          copy "build32\Release\dobby.lib" "build_result\dobby_x86.lib"
          copy "build64\Release\dobby.lib" "build_result\dobby_x64.lib"

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows
          path: build_result

  linux-build:
    runs-on: ubuntu-latest
    name: Linux Build

    steps:
      - uses: actions/checkout@v3
      
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get -y install gcc-multilib g++-multilib libc6-dev-i386

      - name: Configure CMake
        run: |
          cmake -DCMAKE_SYSTEM_PROCESSOR=amd64 -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_BUILD_TYPE=Release -DDynamicBinaryInstrument=OFF -DPlugin.SymbolResolver=OFF -B build64
          cmake -DCMAKE_SYSTEM_PROCESSOR=x86 -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_CXX_FLAGS="-m32" -DCMAKE_C_FLAGS="-m32" -DCMAKE_SHARED_LINKER_FLAGS="-m32" -DCMAKE_BUILD_TYPE=Release -DDynamicBinaryInstrument=OFF -DPlugin.SymbolResolver=OFF -B build86

      - name: Build x64
        run: |
          cd build64 && make dobby
          
      - name: Build x86
        run: |
          cd build86 && make dobby
          
      - name: Collect artifacts
        run: |
          mkdir build_result
          cp build86/libdobby.a build_result/libdobby_x86.a
          cp build64/libdobby.a build_result/libdobby_x64.a
          
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Linux
          path: build_result

  linux-bionic-arm64-build:
    runs-on: ubuntu-18.04
    name: Linux Bionic ARM64 Build

    steps:
      - uses: actions/checkout@v3

      - name: Install ARM64 dependencies for Bionic
        run: |
          sudo apt-get update
          sudo apt-get -y install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Configure CMake for ARM64 Bionic
        run: |
          cmake -DCMAKE_SYSTEM_PROCESSOR=aarch64 -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_BUILD_TYPE=Release -DDynamicBinaryInstrument=OFF -DPlugin.SymbolResolver=OFF -B build_arm64

      - name: Build ARM64 Bionic
        run: |
          cd build_arm64 && make dobby
          
      - name: Collect artifacts
        run: |
          mkdir build_result
          cp build_arm64/libdobby.a build_result/libdobby_arm64.a
          
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Linux_Bionic_ARM64
          path: build_result

  macos-build:
    runs-on: macos-latest
    name: macOS Build

    steps:
      - uses: actions/checkout@v3

      - name: Configure CMake
        run: |
          cmake -DCMAKE_SYSTEM_PROCESSOR=amd64 -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_BUILD_TYPE=Release -DDynamicBinaryInstrument=OFF -DPlugin.SymbolResolver=OFF -B build64
          
      - name: Build x64
        run: |
          cd build64 && make dobby
          
      - name: Collect artifacts
        run: |
          mkdir build_result
          cp build64/libdobby.a build_result/libdobby_x64.a
          
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS
          path: build_result
